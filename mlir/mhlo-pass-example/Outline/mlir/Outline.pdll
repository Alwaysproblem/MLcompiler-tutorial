#include "mlir/IR/PatternBase.td"
#include "mhlo/IR/hlo_ops.td"
#include "mlir/Dialect/Func/IR/FuncOps.td"

// A rewrite that constructs and returns a new operation, given an input value.
// Rewrite BuildFuncOp(root: Value, input: Value) -> Op [{
//   return rewriter.create<mhlo::TanhOp>(root.getLoc(), input);
// }];

Rewrite BuildFuncOp(root: Value, input: Value) -> Op [{
  return createFunction(rewriter, root, input);
}];

Pattern OutlinePdllOptPattern with benefit(0) {
  // ** match section ** //
  let exp = op<mhlo.exponential>(arg: Value);
  let neg = op<mhlo.negate>(arg);
  let exp_neg = op<mhlo.exponential>(neg);
  let sub = op<mhlo.subtract>(exp, exp_neg);
  let add = op<mhlo.add>(exp, exp_neg);
  let root = op<mhlo.divide>(sub, add);

  // ** rewrite section ** //
  // replace root with BuildFuncOp(root, arg);
  rewrite root with {
    BuildFuncOp(root, arg);
    replace root with op<func.call>(arg) {callee = attr<"@tanh_function">};
  };
}
